{"ast":null,"code":"var _jsxFileName = \"/Users/christopherlim/Downloads/CSE183_Assignments/assignment-8/frontend/src/Homepage/DMChat.js\",\n    _s = $RefreshSig$();\n\nimport React from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Drawer from '@material-ui/core/Drawer';\nimport CssBaseline from '@material-ui/core/CssBaseline';\nimport List from '@material-ui/core/List';\nimport Typography from '@material-ui/core/Typography';\nimport IconButton from '@material-ui/core/IconButton';\nimport ListItem from '@material-ui/core/ListItem';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport ListItemAvatar from '@material-ui/core/ListItemAvatar';\nimport Avatar from '@material-ui/core/Avatar';\nimport { WorkspaceContext } from '../Homepage';\nimport KeyboardArrowLeftIcon from '@material-ui/icons/KeyboardArrowLeft';\nimport Grid from '@material-ui/core/Grid';\nimport SendText from './SendText';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst monthList = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];\nconst useStyles = makeStyles(theme => ({\n  root: {\n    display: 'flex'\n  },\n  posting: {\n    width: '100%',\n    backgroundColor: theme.palette.background.paper\n  },\n  inline: {\n    display: 'block',\n    fontWeight: 'bold'\n  },\n  title: {\n    flexGrow: 1,\n    fontSize: `20px`,\n    height: 40,\n    fontFamily: 'Verdana',\n    color: 'white'\n  },\n  drawer: {\n    width: `100%`,\n    flexShrink: 0\n  },\n  drawerPaper: {\n    width: `100%`\n  },\n  drawerHeader: {\n    display: 'flex',\n    alignItems: 'center',\n    paddingTop: 0,\n    ...theme.mixins.toolbar,\n    justifyContent: 'flex-start',\n    background: `#4A154B`\n  },\n  icons: {\n    color: 'white'\n  }\n}));\n\nconst fetchDmFeed = (setDmFeed, dmID) => {\n  const item = localStorage.getItem('user');\n\n  if (!item) {\n    return;\n  }\n\n  const user = JSON.parse(item);\n  const bearerToken = user ? user.accessToken : '';\n\n  if (dmID === '') {\n    return;\n  }\n\n  fetch(`/v0/dm/${dmID}`, {\n    method: 'get',\n    headers: new Headers({\n      'Authorization': `Bearer ${bearerToken}`,\n      'Content-Type': 'application/x-www-form-urlencoded'\n    })\n  }).then(response => {\n    if (!response.ok) {\n      throw response;\n    }\n\n    return response.json();\n  }).then(arr => {\n    setDmFeed(arr);\n  }).catch(error => {\n    console.log(error);\n    setDmFeed([]);\n  });\n};\n/**\n * @return {object} JSX\n */\n\n\nfunction DMChat() {\n  _s();\n\n  const classes = useStyles();\n  const {\n    value,\n    value2,\n    value6,\n    value7,\n    value8\n  } = React.useContext(WorkspaceContext);\n  const [workspace] = value2;\n  const [workspaceList] = value;\n  let wsID = '';\n\n  if (workspace !== undefined) {\n    for (let i = 0; i < workspaceList.length; i++) {\n      if (workspaceList[i]['name'] === workspace) {\n        wsID = workspaceList[i]['id'];\n      }\n    }\n  }\n\n  const [dmDrawerOpen, setdmDrawerOpen] = value6;\n  const [dmObj] = value7; // name, id.\n\n  const [dmFeed, setDmFeed] = value8;\n\n  const handleDrawerClose = () => {\n    setdmDrawerOpen(false);\n  };\n\n  const dmID = dmObj.id;\n  React.useEffect(() => {\n    fetchDmFeed(setDmFeed, dmID);\n  }, [dmID, setDmFeed]);\n\n  const DmMessages = () => {\n    const arr = [];\n    let dmMessages = [];\n    const item = localStorage.getItem('user');\n    const user = JSON.parse(item);\n\n    for (let i = 0; i < dmFeed.length; i++) {\n      if (dmFeed[i]['workspaceID'] === wsID) {\n        if (dmID === dmFeed[i]['directmsg']['user1'] && user.id === dmFeed[i]['directmsg']['user2'] || user.id === dmFeed[i]['directmsg']['user1'] && dmID === dmFeed[i]['directmsg']['user2']) {\n          dmMessages = dmFeed[i]['msg'];\n        }\n      }\n    }\n\n    for (let i = 0; i < dmMessages.length; i++) {\n      const name = dmMessages[i]['name'];\n      const d = new Date(dmMessages[i]['date']);\n      let date = '';\n\n      if (d === new Date()) {\n        date += `${d.getHours()}:${d.getMinutes()}`;\n      } else {\n        date += `${monthList[d.getMonth()]} ${d.getDate()} at \n        ${d.getHours()}:${d.getMinutes()}`;\n      }\n\n      const content = dmMessages[i]['content'];\n      const id = dmMessages[i]['date'];\n\n      const jsx = /*#__PURE__*/_jsxDEV(ListItem, {\n        button: true,\n        alignItems: \"flex-start\",\n        children: [/*#__PURE__*/_jsxDEV(ListItemAvatar, {\n          children: /*#__PURE__*/_jsxDEV(Avatar, {\n            alt: \"Remy Sharp\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 163,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 162,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(ListItemText, {\n          primary: /*#__PURE__*/_jsxDEV(React.Fragment, {\n            children: /*#__PURE__*/_jsxDEV(Grid, {\n              container: true,\n              justifyContent: \"space-between\",\n              children: [/*#__PURE__*/_jsxDEV(Typography, {\n                component: \"span\",\n                variant: \"body1\",\n                className: classes.inline,\n                color: \"textPrimary\",\n                children: name\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 169,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(Typography, {\n                className: classes.inline,\n                color: \"textSecondary\",\n                align: \"right\",\n                children: date\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 175,\n                columnNumber: 19\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 168,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 167,\n            columnNumber: 15\n          }, this),\n          secondary: /*#__PURE__*/_jsxDEV(React.Fragment, {\n            children: /*#__PURE__*/_jsxDEV(Typography, {\n              component: \"span\",\n              variant: \"body1\",\n              color: \"textPrimary\",\n              children: content\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 185,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 184,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 165,\n          columnNumber: 11\n        }, this)]\n      }, id, true, {\n        fileName: _jsxFileName,\n        lineNumber: 158,\n        columnNumber: 9\n      }, this);\n\n      arr.push(jsx);\n    }\n\n    return /*#__PURE__*/_jsxDEV(List, {\n      className: classes.posting,\n      children: arr\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 198,\n      columnNumber: 7\n    }, this);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: classes.root,\n    children: [/*#__PURE__*/_jsxDEV(CssBaseline, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 207,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Drawer, {\n      className: classes.drawer,\n      variant: \"persistent\",\n      anchor: \"right\",\n      open: dmDrawerOpen,\n      classes: {\n        paper: classes.drawerPaper\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: classes.drawerHeader,\n        children: [/*#__PURE__*/_jsxDEV(IconButton, {\n          onClick: handleDrawerClose,\n          children: /*#__PURE__*/_jsxDEV(KeyboardArrowLeftIcon, {\n            className: classes.icons\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 218,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 217,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Typography, {\n          className: classes.title,\n          children: dmObj.name\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 220,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 216,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(DmMessages, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 224,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(SendText, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 225,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 208,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 206,\n    columnNumber: 5\n  }, this);\n}\n\n_s(DMChat, \"7XvzfaViFox9MYX6RjSghoLhXw8=\", false, function () {\n  return [useStyles];\n});\n\n_c = DMChat;\nexport default DMChat;\n\nvar _c;\n\n$RefreshReg$(_c, \"DMChat\");","map":{"version":3,"sources":["/Users/christopherlim/Downloads/CSE183_Assignments/assignment-8/frontend/src/Homepage/DMChat.js"],"names":["React","makeStyles","Drawer","CssBaseline","List","Typography","IconButton","ListItem","ListItemText","ListItemAvatar","Avatar","WorkspaceContext","KeyboardArrowLeftIcon","Grid","SendText","monthList","useStyles","theme","root","display","posting","width","backgroundColor","palette","background","paper","inline","fontWeight","title","flexGrow","fontSize","height","fontFamily","color","drawer","flexShrink","drawerPaper","drawerHeader","alignItems","paddingTop","mixins","toolbar","justifyContent","icons","fetchDmFeed","setDmFeed","dmID","item","localStorage","getItem","user","JSON","parse","bearerToken","accessToken","fetch","method","headers","Headers","then","response","ok","json","arr","catch","error","console","log","DMChat","classes","value","value2","value6","value7","value8","useContext","workspace","workspaceList","wsID","undefined","i","length","dmDrawerOpen","setdmDrawerOpen","dmObj","dmFeed","handleDrawerClose","id","useEffect","DmMessages","dmMessages","name","d","Date","date","getHours","getMinutes","getMonth","getDate","content","jsx","push"],"mappings":"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","sourcesContent":["import React from 'react';\nimport {makeStyles} from '@material-ui/core/styles';\nimport Drawer from '@material-ui/core/Drawer';\nimport CssBaseline from '@material-ui/core/CssBaseline';\nimport List from '@material-ui/core/List';\nimport Typography from '@material-ui/core/Typography';\nimport IconButton from '@material-ui/core/IconButton';\nimport ListItem from '@material-ui/core/ListItem';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport ListItemAvatar from '@material-ui/core/ListItemAvatar';\nimport Avatar from '@material-ui/core/Avatar';\nimport {WorkspaceContext} from '../Homepage';\nimport KeyboardArrowLeftIcon from '@material-ui/icons/KeyboardArrowLeft';\nimport Grid from '@material-ui/core/Grid';\n\nimport SendText from './SendText';\n\nconst monthList = [\n  'Jan', 'Feb', 'Mar',\n  'Apr', 'May', 'Jun',\n  'Jul', 'Aug', 'Sep',\n  'Oct', 'Nov', 'Dec',\n];\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    display: 'flex',\n  },\n  posting: {\n    width: '100%',\n    backgroundColor: theme.palette.background.paper,\n  },\n  inline: {\n    display: 'block',\n    fontWeight: 'bold',\n  },\n  title: {\n    flexGrow: 1,\n    fontSize: `20px`,\n    height: 40,\n    fontFamily: 'Verdana',\n    color: 'white',\n  },\n  drawer: {\n    width: `100%`,\n    flexShrink: 0,\n  },\n  drawerPaper: {\n    width: `100%`,\n  },\n  drawerHeader: {\n    display: 'flex',\n    alignItems: 'center',\n    paddingTop: 0,\n    ...theme.mixins.toolbar,\n    justifyContent: 'flex-start',\n    background: `#4A154B`,\n  },\n  icons: {\n    color: 'white',\n  },\n}));\n\nconst fetchDmFeed = (setDmFeed, dmID) => {\n  const item = localStorage.getItem('user');\n  if (!item) {\n    return;\n  }\n  const user = JSON.parse(item);\n  const bearerToken = user ? user.accessToken : '';\n  if (dmID === '') {\n    return;\n  }\n  fetch(`/v0/dm/${dmID}`, {\n    method: 'get',\n    headers: new Headers({\n      'Authorization': `Bearer ${bearerToken}`,\n      'Content-Type': 'application/x-www-form-urlencoded',\n    }),\n  })\n    .then((response) => {\n      if (!response.ok) {\n        throw response;\n      }\n      return response.json();\n    })\n    .then((arr) => {\n      setDmFeed(arr);\n    })\n    .catch((error) => {\n      console.log(error);\n      setDmFeed([]);\n    });\n};\n\n/**\n * @return {object} JSX\n */\nfunction DMChat() {\n  const classes = useStyles();\n\n  const {value, value2, value6,\n    value7, value8} = React.useContext(WorkspaceContext);\n  const [workspace] = value2;\n  const [workspaceList] = value;\n  let wsID = '';\n  if (workspace !== undefined) {\n    for (let i = 0; i < workspaceList.length; i++) {\n      if (workspaceList[i]['name'] === workspace) {\n        wsID = workspaceList[i]['id'];\n      }\n    }\n  }\n  const [dmDrawerOpen, setdmDrawerOpen] = value6;\n  const [dmObj] = value7; // name, id.\n  const [dmFeed, setDmFeed] = value8;\n\n  const handleDrawerClose = () => {\n    setdmDrawerOpen(false);\n  };\n\n  const dmID = dmObj.id;\n\n  React.useEffect(() => {\n    fetchDmFeed(setDmFeed, dmID);\n  }, [dmID, setDmFeed]);\n\n  const DmMessages = () => {\n    const arr = [];\n    let dmMessages = [];\n    const item = localStorage.getItem('user');\n    const user = JSON.parse(item);\n    for (let i = 0; i < dmFeed.length; i++) {\n      if (dmFeed[i]['workspaceID'] === wsID) {\n        if ((dmID === dmFeed[i]['directmsg']['user1'] &&\n            user.id === dmFeed[i]['directmsg']['user2']) ||\n            (user.id === dmFeed[i]['directmsg']['user1'] &&\n            dmID === dmFeed[i]['directmsg']['user2'])) {\n          dmMessages = dmFeed[i]['msg'];\n        }\n      }\n    }\n\n    for (let i = 0; i < dmMessages.length; i++) {\n      const name = dmMessages[i]['name'];\n      const d = new Date(dmMessages[i]['date']);\n      let date = '';\n      if (d === new Date()) {\n        date += `${d.getHours()}:${d.getMinutes()}`;\n      } else {\n        date += `${monthList[d.getMonth()]} ${d.getDate()} at \n        ${d.getHours()}:${d.getMinutes()}`;\n      }\n      const content = dmMessages[i]['content'];\n      const id = dmMessages[i]['date'];\n\n      const jsx =\n        <ListItem\n          button\n          key={id}\n          alignItems=\"flex-start\">\n          <ListItemAvatar>\n            <Avatar alt=\"Remy Sharp\"/>\n          </ListItemAvatar>\n          <ListItemText\n            primary={\n              <React.Fragment>\n                <Grid container justifyContent=\"space-between\">\n                  <Typography\n                    component=\"span\"\n                    variant=\"body1\"\n                    className={classes.inline}\n                    color=\"textPrimary\"\n                  >{name}</Typography>\n                  <Typography\n                    className={classes.inline}\n                    color=\"textSecondary\"\n                    align='right'>{date}\n                  </Typography>\n                </Grid>\n              </React.Fragment>\n            }\n            secondary={\n              <React.Fragment>\n                <Typography\n                  component=\"span\"\n                  variant=\"body1\"\n                  color=\"textPrimary\"\n                >{content}</Typography>\n              </React.Fragment>\n            }\n          />\n        </ListItem>;\n      arr.push(jsx);\n    }\n\n    return (\n      <List\n        className={classes.posting}>\n        {arr}\n      </List>\n    );\n  };\n\n  return (\n    <div className={classes.root}>\n      <CssBaseline />\n      <Drawer\n        className={classes.drawer}\n        variant=\"persistent\"\n        anchor=\"right\"\n        open={dmDrawerOpen}\n        classes={{\n          paper: classes.drawerPaper,\n        }}>\n        <div className={classes.drawerHeader}>\n          <IconButton onClick={handleDrawerClose}>\n            <KeyboardArrowLeftIcon className={classes.icons}/>\n          </IconButton>\n          <Typography className={classes.title}>\n            {dmObj.name}\n          </Typography>\n        </div>\n        <DmMessages/>\n        <SendText/>\n      </Drawer>\n    </div>\n  );\n}\n\nexport default DMChat;\n"]},"metadata":{},"sourceType":"module"}